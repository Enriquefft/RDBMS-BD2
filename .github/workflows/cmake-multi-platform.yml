# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on gcc only

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]
env:
  BUILD_TYPE: Release
  CXX: g++-13

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install flex
          sudo apt install libfl-dev
          sudo apt install libasio-dev
          sudo apt-get install -y rapidjson-dev

      - name: Install gcc-13
        run: sudo apt install g++-13

      # - name: Install clang-16
      #   if: matrix.os == 'ubuntu-latest' && matrix.c_compiler == 'clang'
      #   run: |
      #     wget https://apt.llvm.org/llvm.sh
      #     chmod +x llvm.sh
      #     sudo ./llvm.sh 16

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_CPP_COMPILER=${{ env.CXX }} -S ${{ github.workspace }}

      - name: Build
        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

      - name: Test
        working-directory: ${{github.workspace}}/build
        # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C ${{env.BUILD_TYPE}}
